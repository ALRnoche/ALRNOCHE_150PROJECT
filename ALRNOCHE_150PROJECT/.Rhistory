rownames(matrix_result) = seq(length(system))
colnames(matrix_result) = c(variables, "RHS")
for(i in 1:length(system))
{
matrix_result[i, "RHS"] = RHS_list[i]
for(j in 1:ncol(matrix_result))
{
}
}
print(matrix_result)
}
else
return(components)
}
E11 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 4.5 * b1 + 1 * c1 + -1 + 0 * a2 + 0 * b2 + 0 * c2 + 0 * a3 + 0 * b3 + 0 * c3
E12 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 20.25 * a2 + 4.5 * b2 + 1 * c2 + -1 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E13 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 49 * a2 + 7 * b2 + 1 * c2 + -2.5 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E19 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + -0.2 * x2 + 10 * x3 + -7.4 * x4 + -0.22 * x5 + 100 * x6 + 0.13 * x7 + -0.2 * x8 + 10 * x9 + -7.4 * x10 + -0.22 * x11 + 100 * x12 + 0.3 * x13 + -0.29 * x14 + 19 * x15 + 0.4 * x16 + -1.22 * x17 + 120 * x18 + 1.13 * x19 + -9.2 * x20 + -71.4
E20 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 1.2 * x2 + 20 * x3 + -0.4 * x4 + -2.22 * x5 + 10 * x6 + -0.13 * x7 + 2.2 * x8 + -0.2 * x9 + 7.4 * x10 + 9.22 * x11 + 10 * x12 + -9.3 * x13 + 2.29 * x14 + 29 * x15 + -0.4 * x16 + 12.22 * x17 + 0.2 * x18 + -0.13 * x19 + 9.2 * x20 + -791.4
E21 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 0.2 * x2 + 29 * x3 + 7.4 * x4 + 0.22 * x5 + -100 * x6 + 2.13 * x7 + 0.2 * x8 + -10 * x9 + -97.4 * x10 + 0.22 * x11 + -100 * x12 + -0.3 * x13 + 20.29 * x14 + -19 * x15 + 90.4 * x16 + 1.22 * x17 + -120 * x18 + -1.13 * x19 + -99.2 * x20 + -701.4
# Combine functions into a list
system <- list(E11, E12, E13)
system2 = list(E19, E20, E21)
AugCoeffMatrix(system2)
# extracting vars from raw function
extract_variables <- function(system)
{
variables <- character(0)
for (func in system)
{
args <- as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args <- args[-1]
args <- names(args)
variables <- unique(c(variables, args))
}
return(variables)
}
# checks if every system contains the same number of var
check_system <- function(system)
{
variables = extract_variables(system)
all_present = T
for (func in system)
{
args = as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args = args[-1]
args = names(args)
if (!all(variables %in% args))
{
all_present = F
variables = NA
break
}
}
result = list(all_present, variables)
return(result)
}
# takes only body values. Omits function(x1, x2, xn, ...) header
body_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
combined_expr_list = list()
for (i in 1:length(system))
{
func_body = body(system[[i]])
expr_string = deparse(func_body)
combined_expr_list[[i]] = paste(expr_string, collapse = "")
}
return(combined_expr_list)
}
else
return(components)
}
# splits into parts by addition symbol
deparsing_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
values = body_values(system)
RHS_list = list()
split_values = list()
for (i in 1:length(values))
{
eq_terms = unlist(strsplit(values[[i]], "\\s+\\+\\s*"))
constants = eq_terms[!grepl("\\*\\s*[a-zA-Z]\\d+", eq_terms)]
RHS_list[[i]] = constants
split_values[[i]] = eq_terms
}
intersect_comp = list()
for (i in 1:length(split_values))
{
complement_terms = split_values[[i]][!split_values[[i]] %in% RHS_list[[i]]]
intersect_comp[[i]] = complement_terms
}
result = list(all_present, variables, RHS_list, intersect_comp)
return(result)
}
else
return(components)
}
# combining all components into 1 large matrix
AugCoeffMatrix <- function(system)
{
components = deparsing_values(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
RHS_list = as.numeric(components[[3]])
intersect_comp = components[[4]]
print(RHS_list)
matrix_result = matrix(NA, nrow = length(system), ncol = length(variables) + 1)
rownames(matrix_result) = seq(length(system))
colnames(matrix_result) = c(variables, "RHS")
for(i in 1:length(system))
{
matrix_result[i, "RHS"] = RHS_list[i]
for(j in 1:ncol(matrix_result))
{
}
}
print(matrix_result)
}
else
return(components)
}
E11 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 4.5 * b1 + 1 * c1 + -1 + 0 * a2 + 0 * b2 + 0 * c2 + 0 * a3 + 0 * b3 + 0 * c3
E12 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 20.25 * a2 + 4.5 * b2 + 1 * c2 + -1 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E13 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 49 * a2 + 7 * b2 + 1 * c2 + -2.5 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E19 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + -0.2 * x2 + 10 * x3 + -7.4 * x4 + -0.22 * x5 + 100 * x6 + 0.13 * x7 + -0.2 * x8 + 10 * x9 + -7.4 * x10 + -0.22 * x11 + 100 * x12 + 0.3 * x13 + -0.29 * x14 + 19 * x15 + 0.4 * x16 + -1.22 * x17 + 120 * x18 + 1.13 * x19 + -9.2 * x20 + -71.4
E20 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 1.2 * x2 + 20 * x3 + -0.4 * x4 + -2.22 * x5 + 10 * x6 + -0.13 * x7 + 2.2 * x8 + -0.2 * x9 + 7.4 * x10 + 9.22 * x11 + 10 * x12 + -9.3 * x13 + 2.29 * x14 + 29 * x15 + -0.4 * x16 + 12.22 * x17 + 0.2 * x18 + -0.13 * x19 + 9.2 * x20 + -791.4
E21 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 0.2 * x2 + 29 * x3 + 7.4 * x4 + 0.22 * x5 + -100 * x6 + 2.13 * x7 + 0.2 * x8 + -10 * x9 + -97.4 * x10 + 0.22 * x11 + -100 * x12 + -0.3 * x13 + 20.29 * x14 + -19 * x15 + 90.4 * x16 + 1.22 * x17 + -120 * x18 + -1.13 * x19 + -99.2 * x20 + -701.4
# Combine functions into a list
system <- list(E11, E12, E13)
system2 = list(E19, E20, E21)
AugCoeffMatrix(system2)
# extracting vars from raw function
extract_variables <- function(system)
{
variables <- character(0)
for (func in system)
{
args <- as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args <- args[-1]
args <- names(args)
variables <- unique(c(variables, args))
}
return(variables)
}
# checks if every system contains the same number of var
check_system <- function(system)
{
variables = extract_variables(system)
all_present = T
for (func in system)
{
args = as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args = args[-1]
args = names(args)
if (!all(variables %in% args))
{
all_present = F
variables = NA
break
}
}
result = list(all_present, variables)
return(result)
}
# takes only body values. Omits function(x1, x2, xn, ...) header
body_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
combined_expr_list = list()
for (i in 1:length(system))
{
func_body = body(system[[i]])
expr_string = deparse(func_body)
combined_expr_list[[i]] = paste(expr_string, collapse = "")
}
return(combined_expr_list)
}
else
return(components)
}
# splits into parts by addition symbol
deparsing_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
values = body_values(system)
RHS_list = list()
split_values = list()
for (i in 1:length(values))
{
eq_terms = unlist(strsplit(values[[i]], "\\s+\\+\\s*"))
constants = eq_terms[!grepl("\\*\\s*[a-zA-Z]\\d+", eq_terms)]
RHS_list[[i]] = constants
split_values[[i]] = eq_terms
}
intersect_comp = list()
for (i in 1:length(split_values))
{
complement_terms = split_values[[i]][!split_values[[i]] %in% RHS_list[[i]]]
intersect_comp[[i]] = complement_terms
}
result = list(all_present, variables, RHS_list, intersect_comp)
return(result)
}
else
return(components)
}
# combining all components into 1 large matrix
AugCoeffMatrix <- function(system)
{
components = deparsing_values(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
RHS_list = as.numeric(components[[3]])
intersect_comp = components[[4]]
print(RHS_list)
matrix_result = matrix(NA, nrow = length(system), ncol = length(variables) + 1)
rownames(matrix_result) = seq(length(system))
colnames(matrix_result) = c(variables, "RHS")
for(i in 1:length(system))
{
matrix_result[i, "RHS"] = RHS_list[i]
for(j in 1:ncol(matrix_result))
{
}
}
print(matrix_result)
}
else
return(components)
}
E11 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 4.5 * b1 + 1 * c1 + -1 + 0 * a2 + 0 * b2 + 0 * c2 + 0 * a3 + 0 * b3 + 0 * c3
E12 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 20.25 * a2 + 4.5 * b2 + 1 * c2 + -1 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E13 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 49 * a2 + 7 * b2 + 1 * c2 + -2.5 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E19 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + -0.2 * x2 + 10 * x3 + -7.4 * x4 + -0.22 * x5 + 100 * x6 + 0.13 * x7 + -0.2 * x8 + 10 * x9 + -7.4 * x10 + -0.22 * x11 + 100 * x12 + 0.3 * x13 + -0.29 * x14 + 19 * x15 + 0.4 * x16 + -1.22 * x17 + 120 * x18 + 1.13 * x19 + -9.2 * x20 + -71.4
E20 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 1.2 * x2 + 20 * x3 + -0.4 * x4 + -2.22 * x5 + 10 * x6 + -0.13 * x7 + 2.2 * x8 + -0.2 * x9 + 7.4 * x10 + 9.22 * x11 + 10 * x12 + -9.3 * x13 + 2.29 * x14 + 29 * x15 + -0.4 * x16 + 12.22 * x17 + 0.2 * x18 + -0.13 * x19 + 9.2 * x20 + -791.4
E21 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 0.2 * x2 + 29 * x3 + 7.4 * x4 + 0.22 * x5 + -100 * x6 + 2.13 * x7 + 0.2 * x8 + -10 * x9 + -97.4 * x10 + 0.22 * x11 + -100 * x12 + -0.3 * x13 + 20.29 * x14 + -19 * x15 + 90.4 * x16 + 1.22 * x17 + -120 * x18 + -1.13 * x19 + -99.2 * x20 + -701.4
# Combine functions into a list
system <- list(E11, E12, E13)
system2 = list(E19, E20, E21)
AugCoeffMatrix(system2)
# extracting vars from raw function
extract_variables <- function(system)
{
variables <- character(0)
for (func in system)
{
args <- as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args <- args[-1]
args <- names(args)
variables <- unique(c(variables, args))
}
return(variables)
}
# checks if every system contains the same number of var
check_system <- function(system)
{
variables = extract_variables(system)
all_present = T
for (func in system)
{
args = as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args = args[-1]
args = names(args)
if (!all(variables %in% args))
{
all_present = F
variables = NA
break
}
}
result = list(all_present, variables)
return(result)
}
# takes only body values. Omits function(x1, x2, xn, ...) header
body_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
combined_expr_list = list()
for (i in 1:length(system))
{
func_body = body(system[[i]])
expr_string = deparse(func_body)
combined_expr_list[[i]] = paste(expr_string, collapse = "")
}
return(combined_expr_list)
}
else
return(components)
}
# splits into parts by addition symbol
deparsing_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
values = body_values(system)
RHS_list = list()
split_values = list()
for (i in 1:length(values))
{
eq_terms = unlist(strsplit(values[[i]], "\\s+\\+\\s*"))
constants = eq_terms[!grepl("\\*\\s*[a-zA-Z]\\d+", eq_terms)]
RHS_list[[i]] = constants
split_values[[i]] = eq_terms
}
intersect_comp = list()
for (i in 1:length(split_values))
{
complement_terms = split_values[[i]][!split_values[[i]] %in% RHS_list[[i]]]
intersect_comp[[i]] = complement_terms
}
result = list(all_present, variables, RHS_list, intersect_comp)
return(result)
}
else
return(components)
}
# combining all components into 1 large matrix
AugCoeffMatrix <- function(system)
{
components = deparsing_values(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
RHS_list = as.numeric(components[[3]])
intersect_comp = components[[4]]
print(RHS_list)
matrix_result = matrix(NA, nrow = length(system), ncol = length(variables) + 1)
rownames(matrix_result) = seq(length(system))
colnames(matrix_result) = c(variables, "RHS")
for(i in 1:length(system))
{
matrix_result[i, "RHS"] = RHS_list[i]
for(j in 1:ncol(matrix_result))
{
}
}
print(matrix_result)
}
else
return(components)
}
E11 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 4.5 * b1 + 1 * c1 + -1 + 0 * a2 + 0 * b2 + 0 * c2 + 0 * a3 + 0 * b3 + 0 * c3
E12 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 20.25 * a2 + 4.5 * b2 + 1 * c2 + -1 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E13 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 49 * a2 + 7 * b2 + 1 * c2 + -2.5 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E19 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + -0.2 * x2 + 10 * x3 + -7.4 * x4 + -0.22 * x5 + 100 * x6 + 0.13 * x7 + -0.2 * x8 + 10 * x9 + -7.4 * x10 + -0.22 * x11 + 100 * x12 + 0.3 * x13 + -0.29 * x14 + 19 * x15 + 0.4 * x16 + -1.22 * x17 + 120 * x18 + 1.13 * x19 + -9.2 * x20 + -71.4
E20 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 1.2 * x2 + 20 * x3 + -0.4 * x4 + -2.22 * x5 + 10 * x6 + -0.13 * x7 + 2.2 * x8 + -0.2 * x9 + 7.4 * x10 + 9.22 * x11 + 10 * x12 + -9.3 * x13 + 2.29 * x14 + 29 * x15 + -0.4 * x16 + 12.22 * x17 + 0.2 * x18 + -0.13 * x19 + 9.2 * x20 + -791.4
E21 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 0.2 * x2 + 29 * x3 + 7.4 * x4 + 0.22 * x5 + -100 * x6 + 2.13 * x7 + 0.2 * x8 + -10 * x9 + -97.4 * x10 + 0.22 * x11 + -100 * x12 + -0.3 * x13 + 20.29 * x14 + -19 * x15 + 90.4 * x16 + 1.22 * x17 + -120 * x18 + -1.13 * x19 + -99.2 * x20 + -701.4
# Combine functions into a list
system <- list(E11, E12, E13)
system2 = list(E19, E20, E21)
AugCoeffMatrix(system2)
# extracting vars from raw function
extract_variables <- function(system)
{
variables <- character(0)
for (func in system)
{
args <- as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args <- args[-1]
args <- names(args)
variables <- unique(c(variables, args))
}
return(variables)
}
# checks if every system contains the same number of var
check_system <- function(system)
{
variables = extract_variables(system)
all_present = T
for (func in system)
{
args = as.list(formals(func))
if (!is.null(names(args)[1]) && names(args)[1] == ".x")
args = args[-1]
args = names(args)
if (!all(variables %in% args))
{
all_present = F
variables = NA
break
}
}
result = list(all_present, variables)
return(result)
}
# takes only body values. Omits function(x1, x2, xn, ...) header
body_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
combined_expr_list = list()
for (i in 1:length(system))
{
func_body = body(system[[i]])
expr_string = deparse(func_body)
combined_expr_list[[i]] = paste(expr_string, collapse = "")
}
return(combined_expr_list)
}
else
return(components)
}
# splits into parts by addition symbol
deparsing_values <- function(system)
{
components = check_system(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
values = body_values(system)
RHS_list = list()
split_values = list()
for (i in 1:length(values))
{
eq_terms = unlist(strsplit(values[[i]], "\\s+\\+\\s*"))
constants = eq_terms[!grepl("\\*\\s*[a-zA-Z]\\d+", eq_terms)]
RHS_list[[i]] = constants
split_values[[i]] = eq_terms
}
intersect_comp = list()
for (i in 1:length(split_values))
{
complement_terms = split_values[[i]][!split_values[[i]] %in% RHS_list[[i]]]
intersect_comp[[i]] = complement_terms
}
result = list(all_present, variables, RHS_list, intersect_comp)
return(result)
}
else
return(components)
}
# combining all components into 1 large matrix
AugCoeffMatrix <- function(system)
{
components = deparsing_values(system)
all_present = components[[1]]
if (all_present)
{
variables = components[[2]]
RHS_list = as.numeric(components[[3]])
intersect_comp = components[[4]]
print(RHS_list)
matrix_result = matrix(NA, nrow = length(system), ncol = length(variables) + 1)
rownames(matrix_result) = seq(length(system))
colnames(matrix_result) = c(variables, "RHS")
for(i in 1:length(system))
{
matrix_result[i, "RHS"] = RHS_list[i]
for(j in 1:ncol(matrix_result))
{
}
}
print(matrix_result)
}
else
return(components)
}
E11 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 4.5 * b1 + 1 * c1 + -1 + 0 * a2 + 0 * b2 + 0 * c2 + 0 * a3 + 0 * b3 + 0 * c3
E12 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 20.25 * a2 + 4.5 * b2 + 1 * c2 + -1 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E13 <- function (b1, c1, a2, b2, c2, a3, b3, c3) 49 * a2 + 7 * b2 + 1 * c2 + -2.5 + 0 * b1 + 0 * c1 + 0 * a3 + 0 * b3 + 0 * c3
E19 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + -0.2 * x2 + 10 * x3 + -7.4 * x4 + -0.22 * x5 + 100 * x6 + 0.13 * x7 + -0.2 * x8 + 10 * x9 + -7.4 * x10 + -0.22 * x11 + 100 * x12 + 0.3 * x13 + -0.29 * x14 + 19 * x15 + 0.4 * x16 + -1.22 * x17 + 120 * x18 + 1.13 * x19 + -9.2 * x20 + -71.4
E20 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 1.2 * x2 + 20 * x3 + -0.4 * x4 + -2.22 * x5 + 10 * x6 + -0.13 * x7 + 2.2 * x8 + -0.2 * x9 + 7.4 * x10 + 9.22 * x11 + 10 * x12 + -9.3 * x13 + 2.29 * x14 + 29 * x15 + -0.4 * x16 + 12.22 * x17 + 0.2 * x18 + -0.13 * x19 + 9.2 * x20 + -791.4
E21 <- function (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) 0.3 * x1 + 0.2 * x2 + 29 * x3 + 7.4 * x4 + 0.22 * x5 + -100 * x6 + 2.13 * x7 + 0.2 * x8 + -10 * x9 + -97.4 * x10 + 0.22 * x11 + -100 * x12 + -0.3 * x13 + 20.29 * x14 + -19 * x15 + 90.4 * x16 + 1.22 * x17 + -120 * x18 + -1.13 * x19 + -99.2 * x20 + -701.4
# Combine functions into a list
system <- list(E11, E12, E13)
system2 = list(E19, E20, E21)
AugCoeffMatrix(system)
library(shiny); runApp('NocheUI_project.R')
shiny::runApp('~/Downloads/Project-20240713T130045Z-001/Project')
runApp('NocheUI_project.R')
runApp('NocheUI_project.R')
runApp('~/Downloads/Project-20240713T130045Z-001/Project')
runApp('NocheUI_project.R')
library(shiny); runApp('NocheUI_project.R')
library(shiny); runApp('NocheUI_project.R')
